generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())        
  name          String  
  externalToken String   @unique                     
  balance       Float    
  lastLogin     DateTime? 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  rouletteRounds RouletteRound[]

  @@index([externalToken]) 
  @@index([name])          
  @@map("users")         
}

model RouletteRound {
  id                String   @id @default(uuid()) 
  playerId          String  
  sessionId         String
  roundId           String   @unique
  gameState         String   @default("PAYOUT")
  winningNumber     Int
  winningColor      String
  totalBetAmount    Float
  totalWinnings     Float
  netResult         Float
  betResults        Json
  playerBalanceBefore Float
  playerBalanceAfter  Float
  currency          String   @default("ARS")
  ipAddress         String?
  provider          String   @default("internal")
  reference         String?
  description       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  player User @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@index([playerId])
  @@index([sessionId])
  @@index([createdAt])
  @@map("roulette_rounds")
}

model ExternalTransaction {
  id            String   @id @default(uuid())
  userId        String
  transactionId String   @unique
  amount        Float
  type          String   
  status        String   
  provider      String
  errorMessage  String?
  rawResponse   String?
  createdAt     DateTime @default(now())

  @@index([userId])
  @@index([status])
}

model FailedTransaction {
  id          String   @id @default(uuid())
  playerId    String
  roomId      String
  type        String   
  amount      Float
  error       String
  status      String   @default("PENDING") 
  createdAt   DateTime @default(now())
}

model Tournament {
  id            String   @id @default(uuid())
  rounds        Int      
  currentRound  Int
  status        String   
  results       Json?    
  createdAt     DateTime @default(now())
  tournamentRounds Round[] @relation(name: "TournamentRounds") 
}

model Round {
  id             String   @id @default(uuid())
  tournamentId   String
  tournament     Tournament @relation(name: "TournamentRounds", fields: [tournamentId], references: [id])
  roundNumber    Int
  winningNumber  Int?
  winningColor   String?
  playerResults  Json?  
  createdAt      DateTime @default(now())
}